{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4040688d-d378-41ee-8a74-6674058b3194",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c6803fe3-d052-4f83-8292-504e6653f25c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('uci_sweep.csv')\n",
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fba906bf-55a5-4f3f-9936-0e4fe52ba64a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Sample Size: 10 =====\n",
      "\n",
      "→ Hyperparameter: model.reg_weight_factor\n",
      "                         count  mean_tpr   std_tpr  mean_fpr\n",
      "model.reg_weight_factor                                     \n",
      "10                           2  0.370000  0.155563  0.090000\n",
      "50                           3  0.340000  0.210000  0.070000\n",
      "1                            3  0.236667  0.112398  0.086667\n",
      "\n",
      "→ Hyperparameter: model.mid_layers\n",
      "                  count  mean_tpr   std_tpr  mean_fpr\n",
      "model.mid_layers                                     \n",
      "3                     3  0.326667  0.219621  0.086667\n",
      "4                     2  0.310000  0.240416  0.085000\n",
      "2                     3  0.290000  0.060828  0.073333\n",
      "\n",
      "→ Hyperparameter: model.mid_features\n",
      "                    count  mean_tpr   std_tpr  mean_fpr\n",
      "model.mid_features                                     \n",
      "16                      1      0.58       NaN  0.090000\n",
      "32                      3      0.35  0.135277  0.096667\n",
      "64                      4      0.21  0.055976  0.067500\n",
      "\n",
      "→ Hyperparameter: dpddm.temp\n",
      "            count  mean_tpr   std_tpr  mean_fpr\n",
      "dpddm.temp                                     \n",
      "1               5  0.372000  0.160530  0.080000\n",
      "2               3  0.203333  0.060277  0.083333\n",
      "\n",
      "===== Sample Size: 20 =====\n",
      "\n",
      "→ Hyperparameter: model.reg_weight_factor\n",
      "                         count  mean_tpr   std_tpr  mean_fpr\n",
      "model.reg_weight_factor                                     \n",
      "10                           7  0.274286  0.203704  0.065714\n",
      "50                           5  0.230000  0.146629  0.052000\n",
      "1                           11  0.166364  0.046749  0.069091\n",
      "\n",
      "→ Hyperparameter: model.mid_layers\n",
      "                  count  mean_tpr   std_tpr  mean_fpr\n",
      "model.mid_layers                                     \n",
      "3                     7  0.248571  0.191000  0.062857\n",
      "4                     9  0.235556  0.126798  0.065556\n",
      "2                     7  0.148571  0.055506  0.064286\n",
      "\n",
      "→ Hyperparameter: model.mid_features\n",
      "                    count  mean_tpr   std_tpr  mean_fpr\n",
      "model.mid_features                                     \n",
      "16                     12  0.273333  0.162051  0.066667\n",
      "32                      6  0.185000  0.035637  0.063333\n",
      "64                      5  0.102000  0.028636  0.060000\n",
      "\n",
      "→ Hyperparameter: dpddm.temp\n",
      "            count  mean_tpr   std_tpr  mean_fpr\n",
      "dpddm.temp                                     \n",
      "1               3     0.520  0.144222     0.040\n",
      "5              20     0.167  0.046915     0.068\n",
      "\n",
      "===== Sample Size: 50 =====\n",
      "\n",
      "→ Hyperparameter: model.reg_weight_factor\n",
      "                         count  mean_tpr   std_tpr  mean_fpr\n",
      "model.reg_weight_factor                                     \n",
      "50                          44  0.775909  0.224886  0.066591\n",
      "10                           5  0.450000  0.300832  0.060000\n",
      "1                            5  0.378000  0.288998  0.070000\n",
      "\n",
      "→ Hyperparameter: model.mid_layers\n",
      "                  count  mean_tpr   std_tpr  mean_fpr\n",
      "model.mid_layers                                     \n",
      "2                    37  0.773514  0.239585  0.068919\n",
      "4                    12  0.573333  0.339367  0.057500\n",
      "3                     5  0.556000  0.177285  0.068000\n",
      "\n",
      "→ Hyperparameter: model.mid_features\n",
      "                    count  mean_tpr   std_tpr  mean_fpr\n",
      "model.mid_features                                     \n",
      "64                     37  0.752432  0.232563  0.068378\n",
      "16                      6  0.678333  0.386855  0.061667\n",
      "32                     11  0.579091  0.315355  0.061818\n",
      "\n",
      "→ Hyperparameter: dpddm.temp\n",
      "            count  mean_tpr   std_tpr  mean_fpr\n",
      "dpddm.temp                                     \n",
      "1              44    0.7975  0.200617  0.066818\n",
      "2               5    0.4900  0.120000  0.062000\n",
      "5               5    0.1480  0.034205  0.066000\n"
     ]
    }
   ],
   "source": [
    "# Only consider rows where fpr_id <= 0.10\n",
    "df = df[df['fpr_id'] <= 0.10]\n",
    "\n",
    "# Columns to analyze\n",
    "hyperparams = ['model.reg_weight_factor', 'model.mid_layers', 'model.mid_features', 'dpddm.temp']\n",
    "sample_sizes = [10, 20, 50]\n",
    "\n",
    "# Analyze each sample size separately\n",
    "for size in sample_sizes:\n",
    "    print(f\"\\n===== Sample Size: {size} =====\")\n",
    "    subset = df[df['dpddm.data_sample_size'] == size]\n",
    "\n",
    "    for hp in hyperparams:\n",
    "        print(f\"\\n→ Hyperparameter: {hp}\")\n",
    "        stats = (\n",
    "            subset\n",
    "            .groupby(hp)\n",
    "            .agg(\n",
    "                count=('tpr', 'count'),\n",
    "                mean_tpr=('tpr', 'mean'),\n",
    "                std_tpr=('tpr', 'std'),\n",
    "                mean_fpr=('fpr_id', 'mean')\n",
    "            )\n",
    "            .sort_values(by='mean_tpr', ascending=False)\n",
    "        )\n",
    "        print(stats.head(5))  # Show top 5 values for that hyperparameter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ba16c407-34a6-4151-a58a-fbf2b61f0037",
   "metadata": {},
   "outputs": [],
   "source": [
    "hyperparams = [\n",
    "    'model.reg_weight_factor',\n",
    "    'model.mid_layers',\n",
    "    'model.mid_features',\n",
    "    'dpddm.temp'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6490cd69-84b0-4a68-9c41-c674f2b392d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "summary = {}\n",
    "\n",
    "for hp in hyperparams:\n",
    "    grouped = (\n",
    "        df.groupby(hp)\n",
    "          .agg(\n",
    "              count=('tpr', 'count'),\n",
    "              mean_tpr=('tpr', 'mean'),\n",
    "              std_tpr=('tpr', 'std'),\n",
    "              mean_fpr=('fpr_id', 'mean')\n",
    "          )\n",
    "          .sort_values(by='mean_tpr', ascending=False)\n",
    "    )\n",
    "    summary[hp] = grouped\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c3d867b1-3ffa-46e3-a378-b05b48cb6406",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Size 10 ===\n",
      "model.reg_weight_factor\n",
      "1     0.236667\n",
      "10    0.370000\n",
      "50    0.340000\n",
      "Name: tpr, dtype: float64\n",
      "=== Size 20 ===\n",
      "model.reg_weight_factor\n",
      "1     0.166364\n",
      "10    0.274286\n",
      "50    0.230000\n",
      "Name: tpr, dtype: float64\n",
      "=== Size 50 ===\n",
      "model.reg_weight_factor\n",
      "1     0.378000\n",
      "10    0.450000\n",
      "50    0.775909\n",
      "Name: tpr, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "for size in [10, 20, 50]:\n",
    "    subset = df[df['dpddm.data_sample_size'] == size]\n",
    "    print(f\"=== Size {size} ===\")\n",
    "    print(subset.groupby('model.reg_weight_factor')['tpr'].mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1ca475a6-7bd8-4e5b-ad80-cd2fcf5f2465",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Sample Size: 10 =====\n",
      "\n",
      "→ Hyperparameter: model.reg_weight_factor\n",
      "                         count  mean_tpr  std_tpr  mean_fpr\n",
      "model.reg_weight_factor                                    \n",
      "10                           2    0.3700   0.1556    0.0900\n",
      "50                           3    0.3400   0.2100    0.0700\n",
      "1                            3    0.2367   0.1124    0.0867\n",
      "\n",
      "→ Hyperparameter: model.mid_layers\n",
      "                  count  mean_tpr  std_tpr  mean_fpr\n",
      "model.mid_layers                                    \n",
      "3                     3    0.3267   0.2196    0.0867\n",
      "4                     2    0.3100   0.2404    0.0850\n",
      "2                     3    0.2900   0.0608    0.0733\n",
      "\n",
      "→ Hyperparameter: model.mid_features\n",
      "                    count  mean_tpr  std_tpr  mean_fpr\n",
      "model.mid_features                                    \n",
      "16                      1      0.58      NaN    0.0900\n",
      "32                      3      0.35   0.1353    0.0967\n",
      "64                      4      0.21   0.0560    0.0675\n",
      "\n",
      "→ Hyperparameter: dpddm.temp\n",
      "            count  mean_tpr  std_tpr  mean_fpr\n",
      "dpddm.temp                                    \n",
      "1               5    0.3720   0.1605    0.0800\n",
      "2               3    0.2033   0.0603    0.0833\n",
      "\n",
      "===== Sample Size: 20 =====\n",
      "\n",
      "→ Hyperparameter: model.reg_weight_factor\n",
      "                         count  mean_tpr  std_tpr  mean_fpr\n",
      "model.reg_weight_factor                                    \n",
      "10                           7    0.2743   0.2037    0.0657\n",
      "50                           5    0.2300   0.1466    0.0520\n",
      "1                           11    0.1664   0.0467    0.0691\n",
      "\n",
      "→ Hyperparameter: model.mid_layers\n",
      "                  count  mean_tpr  std_tpr  mean_fpr\n",
      "model.mid_layers                                    \n",
      "3                     7    0.2486   0.1910    0.0629\n",
      "4                     9    0.2356   0.1268    0.0656\n",
      "2                     7    0.1486   0.0555    0.0643\n",
      "\n",
      "→ Hyperparameter: model.mid_features\n",
      "                    count  mean_tpr  std_tpr  mean_fpr\n",
      "model.mid_features                                    \n",
      "16                     12    0.2733   0.1621    0.0667\n",
      "32                      6    0.1850   0.0356    0.0633\n",
      "64                      5    0.1020   0.0286    0.0600\n",
      "\n",
      "→ Hyperparameter: dpddm.temp\n",
      "            count  mean_tpr  std_tpr  mean_fpr\n",
      "dpddm.temp                                    \n",
      "1               3     0.520   0.1442     0.040\n",
      "5              20     0.167   0.0469     0.068\n",
      "\n",
      "===== Sample Size: 50 =====\n",
      "\n",
      "→ Hyperparameter: model.reg_weight_factor\n",
      "                         count  mean_tpr  std_tpr  mean_fpr\n",
      "model.reg_weight_factor                                    \n",
      "50                          44    0.7759   0.2249    0.0666\n",
      "10                           5    0.4500   0.3008    0.0600\n",
      "1                            5    0.3780   0.2890    0.0700\n",
      "\n",
      "→ Hyperparameter: model.mid_layers\n",
      "                  count  mean_tpr  std_tpr  mean_fpr\n",
      "model.mid_layers                                    \n",
      "2                    37    0.7735   0.2396    0.0689\n",
      "4                    12    0.5733   0.3394    0.0575\n",
      "3                     5    0.5560   0.1773    0.0680\n",
      "\n",
      "→ Hyperparameter: model.mid_features\n",
      "                    count  mean_tpr  std_tpr  mean_fpr\n",
      "model.mid_features                                    \n",
      "64                     37    0.7524   0.2326    0.0684\n",
      "16                      6    0.6783   0.3869    0.0617\n",
      "32                     11    0.5791   0.3154    0.0618\n",
      "\n",
      "→ Hyperparameter: dpddm.temp\n",
      "            count  mean_tpr  std_tpr  mean_fpr\n",
      "dpddm.temp                                    \n",
      "1              44    0.7975   0.2006    0.0668\n",
      "2               5    0.4900   0.1200    0.0620\n",
      "5               5    0.1480   0.0342    0.0660\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load and filter data\n",
    "df = pd.read_csv('uci_sweep.csv')\n",
    "df = df.dropna(subset=['tpr'])\n",
    "df = df[df['fpr_id'] <= 0.10]\n",
    "\n",
    "# List of sample sizes and hyperparameters to inspect\n",
    "sample_sizes = [10, 20, 50]\n",
    "hyperparams = ['model.reg_weight_factor', 'model.mid_layers', 'model.mid_features', 'dpddm.temp']\n",
    "\n",
    "# Analyze each sample size and hyperparameter\n",
    "for size in sample_sizes:\n",
    "    print(f\"\\n===== Sample Size: {size} =====\")\n",
    "    subset = df[df['dpddm.data_sample_size'] == size]\n",
    "\n",
    "    for hp in hyperparams:\n",
    "        print(f\"\\n→ Hyperparameter: {hp}\")\n",
    "        grouped = (\n",
    "            subset\n",
    "            .groupby(hp)\n",
    "            .agg(\n",
    "                count=('tpr', 'count'),\n",
    "                mean_tpr=('tpr', 'mean'),\n",
    "                std_tpr=('tpr', 'std'),\n",
    "                mean_fpr=('fpr_id', 'mean')\n",
    "            )\n",
    "            .sort_values(by='mean_tpr', ascending=False)\n",
    "        )\n",
    "        print(grouped.round(4))  # Round for cleaner output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f81beb69-bcf3-482a-990b-dff9c66fd22f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'model.reg_weight_factor':                          count  mean_tpr   std_tpr  mean_fpr\n",
       " model.reg_weight_factor                                     \n",
       " 50                          52  0.698269  0.283381  0.065385\n",
       " 10                          14  0.350714  0.236333  0.067143\n",
       " 1                           19  0.233158  0.172435  0.072105,\n",
       " 'model.mid_layers':                   count  mean_tpr   std_tpr  mean_fpr\n",
       " model.mid_layers                                     \n",
       " 2                    47  0.649574  0.323217  0.068511\n",
       " 4                    23  0.418261  0.306426  0.063043\n",
       " 3                    15  0.366667  0.227209  0.069333,\n",
       " 'model.mid_features':                     count  mean_tpr   std_tpr  mean_fpr\n",
       " model.mid_features                                     \n",
       " 64                     46  0.634565  0.320172  0.067391\n",
       " 32                     20  0.426500  0.295675  0.067500\n",
       " 16                     19  0.417368  0.309226  0.066316,\n",
       " 'dpddm.temp':             count  mean_tpr   std_tpr  mean_fpr\n",
       " dpddm.temp                                     \n",
       " 1              52  0.740577  0.236107  0.066538\n",
       " 2               8  0.382500  0.176857  0.070000\n",
       " 5              25  0.163200  0.044695  0.067600}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7434c695-7c2e-4b1c-91e8-5b6d832e9aa3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
